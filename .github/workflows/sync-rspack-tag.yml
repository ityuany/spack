name: Sync Rspack Tag
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Rspack tag to sync (e.g., v1.4.0)'
        required: true
        type: string

jobs:
  sync-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write  # 需要写入.github/workflows文件
    
    steps:
      - name: Configure Git and install dependencies
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 确保rsync可用（用于安全复制文件）
          if ! command -v rsync >/dev/null 2>&1; then
            echo "📦 Installing rsync..."
            sudo apt-get update -q
            sudo apt-get install -y rsync
          else
            echo "✅ rsync is already available"
          fi
      
      - name: Clone rspack repository
        run: |
          TAG="${{ github.event.inputs.tag }}"
          echo "🔄 Cloning rspack repository at tag $TAG..."
          
          # 直接克隆指定tag
          if git clone --depth 1 --branch "$TAG" https://github.com/web-infra-dev/rspack.git rspack-source; then
            echo "✅ Successfully cloned rspack at tag $TAG"
          else
            echo "❌ Failed to clone tag $TAG, it may not exist"
            echo "🔄 Checking available tags..."
            
            # 获取可用tags列表
            git ls-remote --tags https://github.com/web-infra-dev/rspack.git | \
              grep -E 'refs/tags/v[0-9]' | \
              sed 's/.*refs\/tags\///' | \
              sort -V | \
              tail -10
            exit 1
          fi
      
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SYNC_TOKEN || secrets.GITHUB_TOKEN }}
          path: target-repo
      
      - name: Create sync branch from target repo
        run: |
          TAG="${{ github.event.inputs.tag }}"
          SYNC_BRANCH="upstream-$TAG"
          echo "SYNC_BRANCH=$SYNC_BRANCH" >> $GITHUB_ENV

          cd target-repo
          
          # 确保在main分支
          git checkout main
          git pull origin main
          
          # 基于main分支创建同步分支（保持git历史连接）
          git checkout -b "$SYNC_BRANCH"
          
          echo "✅ Created sync branch: $SYNC_BRANCH based on main"
      
      - name: Sync rspack content
        run: |
          TAG="${{ github.event.inputs.tag }}"
          
          cd target-repo
          
          # 清空当前内容（保留.git目录）
          echo "🗑️ Clearing current content..."
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          
          # 复制rspack内容
          echo "📋 Copying rspack content..."
          
          # 检查源目录内容
          echo "📋 Source directory contents:"
          ls -la ../rspack-source/
          
          # 复制rspack的所有内容，包括workflows
          if [ -d "../rspack-source" ]; then
            # 先备份当前的同步workflow
            echo "📋 Backing up current sync workflow..."
            if [ -f ".github/workflows/sync-rspack-tag.yml" ]; then
              cp .github/workflows/sync-rspack-tag.yml /tmp/sync-workflow-backup.yml
              echo "✅ Sync workflow backed up"
            else
              echo "⚠️ No existing sync workflow found"
            fi
            
            # 复制rspack的所有内容（包括.github目录）
            if command -v rsync >/dev/null 2>&1; then
              echo "📋 Using rsync to copy all content (including .github)"
              rsync -av --exclude='.git*' ../rspack-source/ ./
            else
              echo "📋 rsync not available, using cp"
              # 复制除了.git之外的所有内容
              find ../rspack-source -maxdepth 1 -mindepth 1 \
                -not -name '.git*' \
                -exec cp -r {} ./ \;
            fi
            
            # 恢复同步workflow（覆盖rspack可能的同名文件）
            if [ -f "/tmp/sync-workflow-backup.yml" ]; then
              mkdir -p .github/workflows
              cp /tmp/sync-workflow-backup.yml .github/workflows/sync-rspack-tag.yml
              echo "✅ Sync workflow restored (preserved over rspack version)"
            fi
            
            # 验证关键目录是否被正确复制
            if [ -d "packages" ]; then
              echo "✅ packages/ directory copied"
            fi
            if [ -d "crates" ]; then
              echo "✅ crates/ directory copied"  
            fi
            if [ -f "package.json" ]; then
              echo "✅ package.json copied"
            fi
            if [ -f "Cargo.toml" ]; then
              echo "✅ Cargo.toml copied"
            fi
            if [ -d ".github/workflows" ]; then
              echo "✅ .github/workflows directory copied"
              echo "📋 Available workflows:"
              ls -la .github/workflows/
            fi
            
            echo "✅ Rspack content copied successfully (including workflows)"
          else
            echo "❌ Source directory not found"
            exit 1
          fi
          
          # 验证复制结果
          echo "📋 Target directory contents after copy:"
          ls -la .
          
          echo "✅ Content synced successfully"
      
      - name: Commit and push changes
        run: |
          TAG="${{ github.event.inputs.tag }}"
          
          cd target-repo
          
          # 配置git使用token进行认证
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # 设置远程URL以使用token
          git remote set-url origin https://x-access-token:${{ secrets.SYNC_TOKEN || secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # 添加所有文件
          git add .
          
          # 显示将要提交的文件
          echo "📋 Files to be committed:"
          git status --porcelain
          echo "📋 Added files count: $(git status --porcelain | wc -l)"
          
          # 检查是否有变更
          if git diff --staged --quiet; then
            echo "📋 No changes to commit"
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            # 提交变更
            git commit -m "🔄 Sync to rspack $TAG" -m "Synced from: https://github.com/web-infra-dev/rspack/tree/$TAG" -m "Note: Includes rspack workflows, sync workflow preserved"
            
            # 显示分支信息用于调试
            echo "📋 Branch status before push:"
            git log --oneline -5
            git status
            
            # 推送同步分支
            git push origin "$SYNC_BRANCH"
            
            echo "✅ Changes committed and pushed"
            echo "NO_CHANGES=false" >> $GITHUB_ENV
          fi
      
      # - name: Create Pull Request
      #   if: env.NO_CHANGES == 'false'
      #   run: |
      #     TAG="${{ github.event.inputs.tag }}"
          
      #     cd target-repo
          
      #     # 确认分支状态和差异
      #     echo "📋 Confirming branch differences:"
      #     git fetch origin main
      #     git log --oneline origin/main..$SYNC_BRANCH
          
      #     # 创建PR
      #     gh pr create \
      #       --title "🔄 Sync to rspack $TAG" \
      #       --body "Complete sync to rspack $TAG using git clone method. Includes all source code and configs. Rspack workflows excluded to avoid permission issues." \
      #       --head "$SYNC_BRANCH" \
      #       --base main
          
      #     echo "✅ Pull Request created successfully"
      #   env:
      #     GH_TOKEN: ${{ secrets.SYNC_TOKEN || secrets.GITHUB_TOKEN }}
      
      - name: Summary
        run: |
          TAG="${{ github.event.inputs.tag }}"
          echo "## 📊 Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Method**: Git clone with history preservation" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: rspack $TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: $SYNC_BRANCH" >> $GITHUB_STEP_SUMMARY
          if [ "$NO_CHANGES" = "true" ]; then
            echo "- **Status**: ✅ No changes needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ✅ PR created" >> $GITHUB_STEP_SUMMARY 